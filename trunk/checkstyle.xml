<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
        "-//Puppy Crawl//DTD Check Configuration 1.2//EN"
        "http://www.puppycrawl.com/dtds/configuration_1_2.dtd">

<module name="Checker">
    <!--
        If you set the basedir property below, then all reported file
        names will be relative to the specified directory. See
        http://checkstyle.sourceforge.net/5.x/config.html#Checker

        <property name="basedir" value="${basedir}"/>
    -->

    <metadata name="com.atlas-sw.eclipse" value="I like Sydney"/>

    <property name="severity" value="warning"/>

    <module name="SuppressionFilter">
        <property name="file" value="${checkstyle.suppressions.file}"/>
    </module>

    <!--
      A FileSetCheck that ensures the correct translation of code by checking property files
      for consistency regarding their keys. Two property files describing one and the same
      context are consistent if they contain the same keys.
    -->
    <!-- see http://checkstyle.sourceforge.net/config_misc.html#Translation -->
    <module name="Translation"/>


    <!--
      Checks that there are no tab characters ('\t') in the source code.

      Rationale:

      * Developers should not need to configure the tab width of their text editors in order
        to be able to read source code.
      * From the Apache jakarta coding standards: In a distributed development environment, when
        the commit messages get sent to a mailing list, they are almost impossible to read
        if you use tabs.
    -->
    <!-- see http://checkstyle.sourceforge.net/config_whitespace.html#FileTabCharacter -->
    <module name="FileTabCharacter">
        <property name="eachLine" value="false"/>
    </module>

    <!--
     Checks for long source files.

     Rationale: If a source file becomes very long it is hard to understand. Therefore long classes
     should usually be refactored into several individual classes that focus on a specific task.
    -->
    <module name="FileLength">
        <property name="max" value="250"/>
    </module>

    <module name="Header">
        <property name="headerFile" value="${checkstyle.header.file}"/>
        <property name="fileExtensions" value="java"/>
        <property name="id" value="header"/>
    </module>

    <module name="RegexpSingleline">
        <property name="format" value="\s+$"/>
        <property name="minimum" value="0"/>
        <property name="maximum" value="0"/>
    </module>

    <module name="NewlineAtEndOfFile">
        <property name="fileExtensions" value="java"/>
    </module>

    <module name="TreeWalker">

        <module name="LineLength">
            <property name="ignorePattern" value="^ *\* *[^ ]+$"/>
            <property name="max" value="120" />
        </module>


        <!--
          Checks the number of parameters of a method or constructor.
          Default number of parameters is 7.
        -->
        <!-- see http://checkstyle.sourceforge.net/config_sizes.html#ParameterNumber -->
        <module name="ParameterNumber" />


        <!--
           Checks for long methods and constructors.

           Rationale: If a method becomes very long it is hard to understand. Therefore long methods
           should usually be refactored into several individual methods that focus on a specific task.
        -->
        <module name="MethodLength">
            <property name="countEmpty" value="false" />
            <property name="max" value="30" />
        </module>

        <!-- Naming conventions -->
        <!-- see http://checkstyle.sourceforge.net/config_naming.html -->

        <!--
            format: ^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$
        -->
        <module name="ConstantName"/>

        <!--
            format: ^[a-z][a-zA-Z0-9]*$
        -->
        <module name="LocalFinalVariableName"/>

        <!--
            format: ^[a-z][a-zA-Z0-9]*$
        -->
        <module name="LocalVariableName"/>

        <!--
            format: ^[a-z][a-zA-Z0-9]*$
        -->
        <module name="MemberName" />

        <!--
            format: ^[a-z][a-zA-Z0-9]*$
        -->
        <module name="MethodName"/>

        <!--
            format: ^[a-z]+(\.[a-zA-Z_][a-zA-Z0-9_]*)*$
        -->
        <module name="PackageName"/>

        <!--
            format: ^[a-z][a-zA-Z0-9]*$
        -->
        <module name="ParameterName" />

        <!--
            format: ^[a-z][a-zA-Z0-9]*$
        -->
        <module name="StaticVariableName" />

        <!--
           format: ^[A-Z][a-zA-Z0-9]*$
        -->
        <module name="TypeName"/>


        <!-- Whitespace checks -->
        <!-- see http://checkstyle.sourceforge.net/config_whitespace.html -->
        <module name="EmptyForIteratorPad"/>
        <module name="MethodParamPad"/>
        <module name="NoWhitespaceAfter"/>
        <module name="NoWhitespaceBefore"/>
        <module name="OperatorWrap">
            <property name="option" value="eol"/>
        </module>
        <module name="ParenPad"/>
        <module name="TypecastParenPad"/>
        <module name="WhitespaceAfter"/>
        <module name="WhitespaceAround"/>
        <property name="tabWidth" value="4"/>


        <!-- Modifier checks -->
        <!-- see http://checkstyle.sourceforge.net/config_modifier.html -->

        <!--
         Checks that the order of modifiers conforms to the suggestions in the Java Language
         specification, sections 8.1.1, 8.3.1 and 8.4.3. The correct order is:

            1. public
            2. protected
            3. private
            4. abstract
            5. static
            6. final
            7. transient
            8. volatile
            9. synchronized
           10. native
           11. strictfp
        -->
        <module name="ModifierOrder"/>

        <!--
          Checks for redundant modifiers in interface and annotation definitions. Also checks for
          redundant final modifiers on methods of final classes.

          Rationale: The Java Language Specification strongly discourages the usage of "public" and
          "abstract" for method declarations in interface definitions as a matter of style.

          Variables in interfaces and annotations are automatically public, static and final,
          so these modifiers are redundant as well.

          As annotations are a form of interface, their fields are also automatically public,
          static and final just as their annotation fields are automatically public and abstract.

          Final classes by definition can not be extended so the final modifier on the method of
          a final class is redundant.
        -->
        <module name="RedundantModifier"/>


        <!-- Block checks -->
        <!-- see http://checkstyle.sourceforge.net/config_blocks.html -->

        <module name="AvoidNestedBlocks"/>

        <module name="EmptyBlock">
            <property name="option" value="stmt"/>
            <property name="tokens" value="LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY, LITERAL_IF, LITERAL_FOR, LITERAL_TRY, LITERAL_WHILE, INSTANCE_INIT,  STATIC_INIT"/>
        </module>


        <module name="EmptyBlock">
            <property name="option" value="text"/>
            <property name="tokens" value="LITERAL_CATCH"/>
        </module>

        <module name="LeftCurly">
            <property name="tokens" value="CLASS_DEF,INTERFACE_DEF,METHOD_DEF,CTOR_DEF"/>
            <property name="option" value="eol"/>
        </module>
        <module name="LeftCurly">
            <property name="maxLineLength" value="120" /> <!-- should match line length -->
            <property name="tokens"
                      value="LITERAL_CATCH,LITERAL_DO,LITERAL_ELSE,LITERAL_FINALLY,LITERAL_FOR,LITERAL_IF,LITERAL_SWITCH,LITERAL_SYNCHRONIZED,LITERAL_TRY,LITERAL_WHILE"/>
            <property name="option" value="nlow"/>
        </module>
         <module name="RightCurly">
            <property name="option" value="alone"/>
        </module>
        <module name="NeedBraces"/>



        <module name="EqualsHashCode"/>

        <!-- module name="IllegalCatch"/ -->

        <!-- Checks for imports -->
        <!-- see http://checkstyle.sourceforge.net/config_imports.html -->

        <!--
          Checks that there are no import statements that use the * notation.

          Rationale: Importing all classes from a package leads to tight coupling between packages and
          might lead to problems when a new version of a library introduces name clashes.
        -->
        <module name="AvoidStarImport"/>

        <!--
          Checks for imports from a set of illegal packages. By default, the check rejects all sun.*
          packages since programs that contain direct calls to the sun.* packages are not 100% Pure
          Java. To reject other packages, set property  illegalPkgs to a list of the illegal packages.
        -->
        <module name="IllegalImport"/>

        <!--
          Checks for redundant import statements. An import statement is considered redundant if:

             * It is a duplicate of another import. This is, when a class is imported more than once.
             * The class imported is from the java.lang package, e.g. importing java.lang.String.
             * The class imported is from the same package.
        -->
        <module name="RedundantImport"/>

        <!--
          Checks for unused import statements. Checkstyle uses a simple but very reliable algorithm to
          report on unused import statements. An import statement is considered unused if:

             * It is not referenced in the file. The algorithm does not support wild-card imports like
               import java.io.*;. Most IDE's provide very sophisticated checks for imports that handle
               wild-card imports.
             * It is a duplicate of another import. This is when a class is imported more than once.
             * The class imported is from the java.lang package. For example importing java.lang.String.
             * The class imported is from the same package.

          The main limitation of this check is handling the case where an imported type has the same name
          as a declaration, such as a member variable.
         -->
        <module name="UnusedImports"/>


        <!-- Checks for common coding problems -->
        <!-- see http://checkstyle.sourceforge.net/config_coding.html -->
        <module name="AvoidInlineConditionals"/>
        <module name="DoubleCheckedLocking"/>
        <module name="EmptyStatement"/>
        <module name="EqualsHashCode"/>
        <module name="HiddenField">
            <property name="tokens" value="VARIABLE_DEF"/>
        </module>
        <module name="IllegalInstantiation"/>
        <module name="InnerAssignment"/>
        <module name="MagicNumber"/>
        <module name="MissingSwitchDefault"/>
        <module name="RedundantThrows"/>
        <module name="SimplifyBooleanExpression"/>
        <module name="SimplifyBooleanReturn"/>

        <!-- Checks for class design -->
        <!-- see http://checkstyle.sourceforge.net/config_design.htm -->

        <!--
          Checks that classes are designed for extension. More specifically, it enforces a programming
          style where superclasses provide empty "hooks" that can be implemented by subclasses.

          The exact rule is that nonprivate, nonstatic methods of classes that can be subclassed must either be

             * abstract or
             * final or
             * have an empty implementation

          Rationale: This API design style protects superclasses against beeing broken by subclasses.
          The downside is that subclasses are limited in their flexibility, in particular they cannot
          prevent execution of code in the superclass, but that also means that subclasses cannot
          corrupt the state of the superclass by forgetting to call the super method.
        -->
        <module name="DesignForExtension"/>
        <module name="FinalClass"/>

        <!--
           Make sure that utility classes (classes that contain only static methods or fields in their API)
           do not have a public constructor.

           Rationale: Instantiating utility classes does not make sense. Hence the constructors should either
           be private or (if you want to allow subclassing) protected. A common mistake is forgetting to hide
           the default constructor.
        -->
        <module name="HideUtilityClassConstructor"/>

        <!--
          Implements Bloch, Effective Java, Item 17 - Use Interfaces only to define types.

          According to Bloch, an interface should describe a type. It is therefore inappropriate to define an
          interface that does not contain any methods but only constants. The Standard class
          javax.swing.SwingConstants is an example of a class that would be flagged by this check.

          The check can be configured to also disallow marker interfaces like java.io.Serializable,
          that do not contain methods or constants at all.
        -->
        <module name="InterfaceIsType"/>

        <!--
           Checks visibility of class members. Only static final members may be public; other class
           members must be private unless property protectedAllowed or packageAllowed is set.

           Public members are not flagged if the name matches the public member regular expression
           (contains "^serialVersionUID$" by default).

           Rationale: Enforce encapsulation
         -->
        <module name="VisibilityModifier"/>

        <!--
         Restricts throws statements to a specified count (default = 1).

         Rationale: Exceptions form part of a methods interface. Declaring a method to throw too many differently
         rooted exceptions makes exception handling onerous and leads to poor programming practices such as
         catch (Exception). This check forces developers to put exceptions into a heirachy such that in the
         simplest case, only one type of exception need be checked for by a caller but allows any
         sub-classes to be caught specifically if necessary.
        -->
        <module name="ThrowsCount">
            <property name="max" value="2"/>
        </module>

        <!--
          Ensures that exceptions (defined as any class name conforming to some regular expression) are immutable.
          That is, have only final fields.

          The current algorithm is very simple it checks that all members of exception are final. User can
          still mutates an exception's instance (e.g. Throwable has setStackTrace(StackTraceElement[] stackTrace)
          method which changes stack trace). But, at least, all information provided by this exception type
          is unchangable.

          Rationale: Exception instances should represent an error condition. Having non final fields not only
          allows the state to be modified by accident and therefore mask the original condition but also
          allows developers to accidentally forget to initialise state thereby leading to code catching the
          exception to draw incorrect conclusions based on the state.
        -->
        <module name="MutableException"/>


        <module name="IllegalThrows"/>
        <!--
         Checks Javadoc comments for class and interface definitions. By default, does not check for
         author or version tags. The scope to verify is specified using the Scope class and defaults
         to Scope.PRIVATE.

        -->
        <!-- see http://checkstyle.sourceforge.net/config_javadoc.html#JavadocType -->
        <module name="JavadocType">
            <property name="authorFormat" value="\S"/>
        </module>

        <!--
           Checks the Javadoc of a method or constructor. By default, does not check for unused
           throws. To allow documented java.lang.RuntimeExceptions that are not declared, set
           property allowUndeclaredRTE to true. The scope to verify is specified using the Scope
           class and defaults to Scope.PRIVATE. To verify another scope, set property scope to a
           different scope.

           Error messages about parameters and type parameters for which no param tags are present can be
           suppressed by defining property allowMissingParamTags. Error messages about exceptions which
           are declared to be thrown, but for which no throws tag is present can be suppressed by defining
           property allowMissingThrowsTags. Error messages about methods which return non-void but for which
           no return tag is present can be suppressed by defining property allowMissingReturnTag.

           Javadoc is not required on a method that is tagged with the @Override annotation. However under
           Java 5 it is not possible to mark a method required for an interface (this was corrected under Java 6).
           Hence Checkstyle supports using the convention of using a single {@inheritDoc} tag instead of all
           the other tags.

           Note that only inheritable items will allow the {@inheritDoc} tag to be used in place of comments.
           Static methods at all visibilities, private non-static methods and constructors are not inheritable.
        -->
        <!-- see http://checkstyle.sourceforge.net/config_javadoc.html#JavadocMethod -->
        <module name="JavadocMethod">
            <property name="scope" value="package"/>
            <property name="allowUndeclaredRTE" value="true"/>
            <property name="allowThrowsTagsForSubclasses" value="true"/>
            <property name="allowMissingPropertyJavadoc" value="true"/>

        </module>
        <!--
          Checks that variables have Javadoc comments.
        -->
        <!-- see http://checkstyle.sourceforge.net/config_javadoc.html#JavadocVariable -->
        <module name="JavadocVariable">
            <property name="scope" value="package"/>
        </module>

        <!--
         Validates Javadoc comments to help ensure they are well formed. The following checks are performed:

          * Ensures the first sentence ends with proper punctuation
            (That is a period, question mark, or exclamation mark, by default). Javadoc automatically places
            the first sentence in the method summary table and index. With out proper punctuation the Javadoc
            may be malformed. All items eligible for the {@inheritDoc} tag are exempt from this requirement.
          * Check text for Javadoc statements that do not have any description. This includes both completely
            empty Javadoc, and Javadoc with only tags such as @param and @return.
          * Check text for incomplete HTML tags. Verifies that HTML tags have corresponding end tags and issues
            an "Unclosed HTML tag found:" error if not. An "Extra HTML tag found:" error is issued if an end tag
            is found without a previous open tag.
          * Check that a package Javadoc comment is well-formed (as described above) and NOT missing from any
            package-info.java files.
          * Check for allowed HTML tags. The list of allowed HTML tags is "a", "abbr", "acronym", "address", "area",
            "b", "bdo", "big", "blockquote", "br", "caption", "cite", "code", "colgroup", "del", "div", "dfn", "dl",
            "em", "fieldset", "h1" to "h6", "hr", "i", "img", "ins", "kbd", "li", "ol", "p", "pre", "q", "samp", "small",
            "span", "strong", "sub", "sup", "table", "tbody", "td", "tfoot", "th", "thread", "tr", "tt", "ul".

          These checks were patterned after the checks made by the DocCheck doclet available from Sun.
        -->
        <!-- see http://checkstyle.sourceforge.net/config_javadoc.html#JavadocStyle -->
        <module name="JavadocStyle">
            <property name="scope" value="package"/>
            <property name="checkEmptyJavadoc" value="true"/>
        </module>



       <!-- Miscellaneous other checks. -->
        <!-- see http://checkstyle.sourceforge.net/ -->

        <!--
          Checks that long constants are defined with an upper ell. That is ' L' and not 'l'.
          This is in accordance to the Java Language Specification,  Section 3.10.1.
        -->
        <module name="UpperEll"/>

        <!--
          Checks the style of array type definitions. Java-style: public static void main(String[] args).
        -->
        <module name="ArrayTypeStyle"/>


        <!--
          A check for TODO: comments.
        -->
        <module name="TodoComment"/>

        <!--<module name="FinalLocalVariable"/>-->

        <!--
          Checks for the number of types declared at the outer  (or root) level in a file.  Defaults to 1.
        -->
        <module name="OuterTypeNumber"/>

        <!--
          Checks that the whitespace around the Generic tokens < and >  is correct to the typical convention.

          Legal:
          List<Integer> x = new ArrayList<Integer>();
          List<List<Integer>> y = new ArrayList<List<Integer>>();

          Illegal:
          List < Integer > x = new ArrayList < Integer > ();
          List < List < Integer > > y = new ArrayList < List < Integer > > ();
        -->
        <module name="GenericWhitespace"/>

        <!-- Generates quite a few errors -->
        <module name="CyclomaticComplexity">
            <property name="severity" value="ignore"/>
        </module>

        <module name="NestedIfDepth">
            <property name="max" value="3"/>
        </module>

        <!--
          Restricts nested try blocks to a specified depth.
        -->
        <module name="NestedTryDepth">
            <property name="max" value="2"/>
        </module>

        <!--
           Checks if any class or object member explicitly initialized to default for its type value
           (null for object references, zero for numeric types and char and false for boolean.

           Rationale: each instance variable gets initialized twice, to the same value. Java initializes
           each instance variable to its default value (0 or null) before performing any initialization
           specified in the code. So in this case, x gets initialized to 0 twice, and bar gets initialized
           to null twice. So there is a minor inefficiency. This style of coding is a hold-over from
           C/C++ style coding, and it shows that the developer isn't really confident that Java really
           initializes instance variables to default values.
        -->
        <module name="ExplicitInitialization"/>

        <!--

          This check controls the style with the usage of annotations. Defaults are:

          elementStyle : compact_no_array
          closingParens : never
          trailingArrayComma :never

          see http://checkstyle.sourceforge.net/property_types.html#elementStyle
          see http://checkstyle.sourceforge.net/property_types.html#closingParens
        -->
        <module name="AnnotationUseStyle"/>

        <!--
          Verifies that both the java.lang.Deprecated annotation is present and the @deprecated
          Javadoc tag is present when either is present.
         -->
        <module name="MissingDeprecated"/>

        <!--
          Verifies that the java.lang.Override annotation is present when the {@inheritDoc} javadoc tag is present.
        -->
        <module name="MissingOverride">
            <property name="javaFiveCompatibility" value="true"/>
        </module>

        <!--
          This check makes sure that all package annotations are in the package-info.java file.
        -->
        <module name="PackageAnnotation"/>
        <!--<module name="SuppressWarnings"/>-->
    </module>
</module>
